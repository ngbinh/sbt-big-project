# note that all "newer" checks need a 1 second pause before the action
# due to OS / filesystem limitations.

> breadcrumbsClear

# check internal computation
> a/dependentsExpect b c d
> b/dependentsExpect c d
> c/dependentsExpect d
> d/dependentsExpect

# compile d
> d/compile
> a/breadcrumbsExpect compile-update compile-compile compile-packageBin projectDescriptors
> b/breadcrumbsExpect compile-update compile-compile compile-packageBin projectDescriptors
> c/breadcrumbsExpect compile-update compile-compile compile-packageBin projectDescriptors
> d/breadcrumbsExpect compile-update compile-compile projectDescriptors
$ exists a/target/scala-2.10/a_2.10-v1.jar
$ exists b/target/scala-2.10/b_2.10-v1.jar
$ exists c/target/scala-2.10/c_2.10-v1.jar
$ absent d/target/scala-2.10/d_2.10-v1.jar
> breadcrumbsClear

# check that another d/compile doesn't invoke a/compile:compile, b/compile:compile or c/compile:compile
> d/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect
> c/breadcrumbsExpect
> d/breadcrumbsExpect compile-update compile-compile projectDescriptors
> breadcrumbsClear
> d/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect
> c/breadcrumbsExpect
> d/breadcrumbsExpect compile-update compile-compile projectDescriptors
> breadcrumbsClear

# after a reload, check that d/compile doesn't invoke
# a/compile:compile, etc (new session not possible with scripted)
> d/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect
> c/breadcrumbsExpect
> d/breadcrumbsExpect compile-update compile-compile projectDescriptors
> breadcrumbsClear
> d/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect
> c/breadcrumbsExpect
> d/breadcrumbsExpect compile-update compile-compile projectDescriptors
> breadcrumbsClear

# make a trivial change in b, a d/compile should not recompile
# (this is expected, but not ideal, and may be addressed)
$ touch timestamp
$ sleep 1000
$ touch b/main/src/scala/Foo.scala
> d/compile
$ newer timestamp b/target/scala-2.10/b_2.10-v1.jar
> breadcrumbsClear

# delete b's jar, d/compile should recompile b's jar
$ delete b/target/scala-2.10/b_2.10-v1.jar
> d/compile
$ exists b/target/scala-2.10/b_2.10-v1.jar
> a/breadcrumbsExpect
> b/breadcrumbsExpect compile-update compile-compile projectDescriptors compile-packageBin
> c/breadcrumbsExpect compile-update projectDescriptors
> d/breadcrumbsExpect compile-compile compile-update projectDescriptors
> breadcrumbsClear

# delete b's classes, d/compile should not recompile b
$ delete b/target/scala-2.10/classes
> d/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect
> c/breadcrumbsExpect
> d/breadcrumbsExpect compile-update compile-compile projectDescriptors
> breadcrumbsClear

# b/compile recompiles b and delete's (only) its jar
$ touch timestamp
$ sleep 1000
> b/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect compile-update compile-compile projectDescriptors
> c/breadcrumbsExpect
> d/breadcrumbsExpect
> breadcrumbsClear
$ exists a/target/scala-2.10/a_2.10-v1.jar
$ newer timestamp a/target/scala-2.10/a_2.10-v1.jar
$ absent b/target/scala-2.10/b_2.10-v1.jar
$ exists c/target/scala-2.10/c_2.10-v1.jar
$ newer timestamp c/target/scala-2.10/c_2.10-v1.jar

# another b/compile attempts to recompile b
> b/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect compile-update compile-compile projectDescriptors
> c/breadcrumbsExpect
> d/breadcrumbsExpect
> breadcrumbsClear

# recompiling d again should (only) rebuild b's jars
$ touch timestamp
$ sleep 1000
> d/compile
> a/breadcrumbsExpect
> b/breadcrumbsExpect compile-update compile-compile compile-packageBin projectDescriptors
> c/breadcrumbsExpect compile-update projectDescriptors
> d/breadcrumbsExpect compile-update compile-compile projectDescriptors
> breadcrumbsClear
$ exists a/target/scala-2.10/a_2.10-v1.jar
$ newer timestamp a/target/scala-2.10/a_2.10-v1.jar
$ exists b/target/scala-2.10/b_2.10-v1.jar
$ newer b/target/scala-2.10/b_2.10-v1.jar timestamp
$ exists c/target/scala-2.10/c_2.10-v1.jar
$ newer timestamp c/target/scala-2.10/c_2.10-v1.jar
$ absent d/target/scala-2.10/d_2.10-v1.jar

# making a breaking change in b should nuke downstream jars
# but not b's jar.
> d/packageBin
> b/breakingChange
> breadcrumbsClear
$ exists a/target/scala-2.10/a_2.10-v1.jar
$ exists b/target/scala-2.10/b_2.10-v1.jar
$ absent c/target/scala-2.10/c_2.10-v1.jar
$ absent d/target/scala-2.10/d_2.10-v1.jar

# check that runMain will build the packageBin
> d/runMain d.Foo
> a/breadcrumbsExpect
> b/breadcrumbsExpect
> c/breadcrumbsExpect compile-update compile-compile compile-packageBin projectDescriptors
> d/breadcrumbsExpect compile-update compile-compile compile-packageBin projectDescriptors
> breadcrumbsClear

# a second invocation of runMain should succeed
> d/runMain d.Foo
> a/breadcrumbsExpect
> b/breadcrumbsExpect
> c/breadcrumbsExpect
> d/breadcrumbsExpect compile-update compile-compile compile-packageBin projectDescriptors
> breadcrumbsClear

# try to weed out any race conditions around the deletion of the jar
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
> d/runMain d.Foo
